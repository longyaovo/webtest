import{w as e,u as t,p as i,r as s,ak as o,l as n,a9 as a,a4 as d,x as r,c,_ as l,n as h,t as u,s as p,e as f,dB as b,dC as g,ar as m,dD as v,dE as y,d as k,ap as S,a0 as w,f as I}from"./shell-7035335f.js";import{r as T}from"./requestGql-85ae2d37.js";import{c as E}from"./index-18b99d92.js";import{I as C}from"./icon-overflow-horizontal-fill-1d6543b4.js";import"./shreddit-spoiler-c66cd354.js";var U;!function(e){e.HideNotification="hide_notification",e.HideSubreddit="hide_subreddit",e.HideUpdates="hide_updates",e.DisableNotificationType="disable_notification_type",e.BlockUser="block_user"}(U||(U={}));const N=({notificationType:t,notificationId:i,isViewed:s,isClicked:o,action:n})=>e({source:"inbox",action:n,noun:"inbox_notification"},{notification_type:t,inbox:{id:i,is_viewed:s,is_clicked:o}}),L=e=>R({...e,noun:"overflow_option"}),R=({notificationType:t,notificationId:i,isViewed:s,isClicked:o,noun:n,action_info_type:a})=>e({source:"inbox",action:"click",noun:n},{notification_type:t,inbox:{id:i,is_viewed:s,is_clicked:o},...a&&{action_info_type:a}}),_=e=>Array.from(document.querySelectorAll('[data-id="notification-item-prevent-link"]')).some((t=>t.contains(e.target)));var O,P,x;!function(e){e.Popover="popover",e.Route="route"}(O||(O={})),function(e){e.NumNotifications="numNotifications",e.RenderType="renderType"}(P||(P={})),function(e){e.CursorForNextPage="nextPageCursor",e.HasRenderedEarlierHeader="hasRenderedEarlierHeader"}(x||(x={}));E(`/svc/shreddit/notifications-inbox-content/:${P.NumNotifications}/:${P.RenderType}`);let H=class extends(t(i(p))){constructor(){super(...arguments),this.isViewed=!1,this.isDeletedPost=!1,this.isRemovedPost=!1,this.notificationId="",this.messageType="",this.hasLink="",this.isHidden=!1,this.observer=null,this.handleVisibilityChange=([{isIntersecting:e}])=>{var t;e&&!this.isViewed&&(this.trackEvent((t=this.getTrackEventProperties(),N({...t,action:"view"}))),this.publish(s.NotificationInboxNotificationViewedEvent,this.notificationId),this.isViewed=!0,this.observer?.disconnect())},this.hideIfIsSelf=e=>{e===this.notificationId&&this.hide()},this.hide=()=>this.isHidden=!0,this.onClick=async e=>((!this.hasLink||this.isDeletedPost||this.isRemovedPost||_(e))&&e.preventDefault(),this.isDeletedPost?this.showAlert({message:"Sorry this post was deleted"}):this.isRemovedPost&&this.showAlert({message:"This content is no longer available"}),await this.fireReadEvent(),!1),this.getUnreadChildElement=()=>this.querySelector(".bg-secondary-background-selected"),this.fireReadEvent=async()=>{this.trackEvent((({notificationType:t,notificationId:i,isViewed:s,isClicked:o,clickTarget:n})=>e({source:"inbox",action:"click",noun:"inbox_notification"},{notification_type:t,action_info_position:"cta"===n?2:1,inbox:{id:i,is_viewed:s,is_clicked:o}}))({...this.getTrackEventProperties(),clickTarget:"notification"}));if(this.getUnreadChildElement()){this.removeUnreadState();try{this.notificationId.includes("_")?await T({operation:o.MarkNotificationReadWithThingId,variables:{input:{messageId:this.notificationId}}}):await T({operation:o.MarkNotificationRead,variables:{input:{notificationId:this.notificationId}}})}catch(e){}}},this.removeUnreadState=()=>this.getUnreadChildElement()?.classList.remove("bg-secondary-background-selected"),this.showAlert=({message:e})=>this.dispatchEvent(n("faceplate-alert",{level:a.warning,message:e})),this.getTrackEventProperties=()=>({notificationType:this.messageType,notificationId:this.notificationId,isViewed:this.isViewed,isClicked:!!this.getUnreadChildElement()})}connectedCallback(){super.connectedCallback(),this.observer=new IntersectionObserver(this.handleVisibilityChange,{root:document.querySelector('[data-id="notification-container-element"]'),threshold:.25}),this.observer.observe(this)}disconnectedCallback(){super.disconnectedCallback(),this.observer?.disconnect()}firstUpdated(){var e;this.trackEvent((e=this.getTrackEventProperties(),N({...e,action:"receive"}))),this.isViewed||this.publish(s.NotificationInboxNotificationReceivedEvent,this.notificationId),this.querySelector("a")?.addEventListener("click",this.onClick),this.subscribe(s.NotificationInboxNotificationHideEvent,this.hideIfIsSelf),this.subscribe(s.NotificationInboxNotificationReadAllEvent,this.removeUnreadState)}render(){return this.isHidden?d:r`<slot></slot>`}};H.styles=[c],l([h({type:Boolean,attribute:"is-viewed",reflect:!0})],H.prototype,"isViewed",void 0),l([h({type:Boolean,attribute:"is-deleted-post"})],H.prototype,"isDeletedPost",void 0),l([h({type:Boolean,attribute:"is-removed-post"})],H.prototype,"isRemovedPost",void 0),l([h({type:String,attribute:"notification-id"})],H.prototype,"notificationId",void 0),l([h({type:String,attribute:"message-type"})],H.prototype,"messageType",void 0),l([h({type:Boolean,attribute:"has-link"})],H.prototype,"hasLink",void 0),l([u()],H.prototype,"isHidden",void 0),H=l([f("notification-item")],H);let A=class extends p{constructor(){super(...arguments),this.isHidden=!1,this.colorMap={},this.hide=e=>{e.preventDefault(),this.isHidden=!0},this.onClick=e=>{_(e)&&e.preventDefault()}}firstUpdated(){this.querySelectorAll('[data-id="notification-dismissal-element"').forEach((e=>e.addEventListener("click",this.hide))),this.querySelectorAll("a").forEach((e=>e.addEventListener("click",this.onClick))),Object.entries(this.colorMap).forEach((([e,t])=>{this.style.setProperty(`--${e}`,t)}))}render(){return this.isHidden?d:r`<slot></slot>`}};A.styles=[c],l([u()],A.prototype,"isHidden",void 0),l([h({type:Object})],A.prototype,"colorMap",void 0),A=l([f("notification-inbox-banner")],A);const D=({notificationLevel:e,isEnablingUpdates:t})=>{if(t)switch(e){case b.Off:case null:return b.Low;case b.Low:case b.Frequent:default:return b.Frequent}else switch(e){case b.Frequent:return b.Low;case b.Low:default:return b.Off}};let B=class extends(t(i(p))){constructor(){super(...arguments),this.isViewed=!1,this.messageType="",this.notificationLevel=null,this.notificationId="",this.userId="",this.userName="",this.postId="",this.commentId="",this.subredditId="",this.isHideEligible=!1,this.isToggleUpdateFromSubredditEligible=!1,this.isToggleNotificationUpdateEligible=!1,this.isToggleLowUpdateFromSubredditEligible=!1,this.initialNotificationLevel=null,this.isNotificationLevelOff=()=>!this.notificationLevel||this.notificationLevel===b.Off,this.getIsRead=()=>!this.closest("notification-item")?.querySelector(".bg-secondary-background-selected"),this.shouldRenderHide=()=>this.isHideEligible,this.shouldRenderDisableUpdates=()=>this.isToggleNotificationUpdateEligible&&(this.postId||this.commentId),this.shouldRenderDisableUpdatesFromSubreddit=()=>this.subredditId&&this.isToggleUpdateFromSubredditEligible,this.shouldRenderBlockThisUser=()=>this.userId&&this.userName&&this.messageType&&[g.ChatAcceptInvite,g.ChatMessage,g.ChatMessageReaction,g.ChatRequest,g.AwardReceived].includes(this.messageType),this.shouldRenderSeeLessFromSubreddit=()=>this.subredditId&&this.isToggleLowUpdateFromSubredditEligible,this.hideNotification=async()=>{try{if((await m({operation:o.DeleteInboxNotifications,variables:{input:{notificationIds:[this.notificationId]}}})).data.deleteInboxNotifications?.ok)return this.showAlert({level:a.notice,message:"Success! You won't see updates on this in the future"}),void this.publish(s.NotificationInboxNotificationHideEvent,this.notificationId)}catch(e){window.Sentry?.captureMessage(e)}this.showAlert({})},this.changeUpdatesFromSubreddit=async e=>{try{this.notificationLevel=e?this.initialNotificationLevel:b.Off;if((await m({operation:o.UpdateSubredditNotificationSettings,variables:{input:{subredditId:this.subredditId,isUpdateFromSubredditEnabled:e,isSubredditUpdatesInterestingPostEnabled:!this.isNotificationLevelOff()}}})).data.updateSubredditNotificationSettings?.ok)return void this.handleAlerts({actionInfoType:U.HideSubreddit,isDo:!e,doConfig:{message:"Success! You won't see updates from this subreddit in the future.",undoOnClick:()=>this.changeUpdatesFromSubreddit(!0)},undoConfig:{message:"Success! Hiding updates from this subreddit has been undone."}})}catch(e){window.Sentry?.captureMessage(e)}this.notificationLevel=e?b.Off:this.initialNotificationLevel,this.showAlert({})},this.changeSeeLessFromSubreddit=async e=>{this.notificationLevel=D({isEnablingUpdates:e,notificationLevel:this.notificationLevel});try{if((await m({operation:o.UpdateSubredditNotificationSettings,variables:{input:{subredditId:this.subredditId,isUpdateFromSubredditEnabled:!this.isNotificationLevelOff(),isSubredditUpdatesInterestingPostEnabled:e}}})).data.updateSubredditNotificationSettings?.ok)return void this.handleAlerts({actionInfoType:U.DisableNotificationType,isDo:!e,doConfig:{message:"Success! You'll see less from this subreddit in the future.",undoOnClick:()=>this.changeSeeLessFromSubreddit(!0)},undoConfig:{message:"Success! Seeing less from this subreddit has been undone."}})}catch(e){window.Sentry?.captureMessage(e)}this.notificationLevel=D({isEnablingUpdates:!e,notificationLevel:this.notificationLevel}),this.showAlert({})},this.changeUpdatesOnThisPost=async e=>{try{if((await m({operation:o.UpdatePostSendRepliesState,variables:{input:{postId:this.postId,sendRepliesState:e?v.Send:v.DoNotSend}}})).data.updatePostSendRepliesState?.ok)return void this.handleAlerts({actionInfoType:U.HideUpdates,isDo:!e,doConfig:{message:"Success! You won't see updates on this post in the future.",undoOnClick:()=>this.changeUpdatesOnThisPost(!0)},undoConfig:{message:"Success! Hiding updates has been undone."}})}catch(e){window.Sentry?.captureMessage(e)}this.showAlert({})},this.changeUpdatesOnThisComment=async e=>{try{if((await m({operation:o.UpdateCommentSendRepliesState,variables:{input:{commentId:this.commentId,sendRepliesState:e?v.Send:v.DoNotSend}}})).data.updateCommentSendRepliesState?.ok)return void this.handleAlerts({actionInfoType:U.HideUpdates,isDo:!e,doConfig:{message:"Success! You won't see updates on this comment in the future.",undoOnClick:()=>this.changeUpdatesOnThisComment(!0)},undoConfig:{message:"Success! Hiding updates has been undone."}})}catch(e){window.Sentry?.captureMessage(e)}this.showAlert({})},this.changeUserBlockStatus=async e=>{try{if((await m({operation:o.UpdateRedditorBlockState,variables:{input:{redditorId:this.userId,blockState:e}}})).data.updateRedditorBlockState?.ok)return void this.handleAlerts({actionInfoType:U.BlockUser,isDo:e===y.Blocked,doConfig:{message:`u/${this.userName} is now blocked.`,undoOnClick:()=>this.changeUserBlockStatus(y.None)},undoConfig:{message:`u/${this.userName} is now unblocked.`}})}catch(e){window.Sentry?.captureMessage(e)}this.showAlert({})},this.handleAlerts=({isDo:e,actionInfoType:t,doConfig:i,undoConfig:s})=>{e?this.showAlert({level:a.notice,message:i.message,undoOnClick:i.undoOnClick,actionInfoType:t}):this.showAlert({level:a.notice,message:s.message})},this.showAlert=({level:e=a.error,message:t="Something went wrong",undoOnClick:i,actionInfoType:s})=>this.dispatchEvent(n("faceplate-alert",{level:e,message:t,namedContent:i&&s?{action:r`<faceplate-tracker \n source="${"inbox"}" \n action="undo" \n noun="${"overflow_option"}" \n data-faceplate-tracking-context="${JSON.stringify(this.getTrackClickOptionProperties(s))}" \n>\n ${k({children:"Undo",attributes:{onclick:i}})}\n </faceplate-tracker>`}:void 0})),this.renderHideThisNotification=()=>this.renderMenuElement({label:"Hide this notification",onClick:()=>(this.trackEvent(L(this.getTrackClickOptionProperties(U.HideNotification))),this.hideNotification()),dataTestId:"hide-this-notification"}),this.renderDisableUpdates=()=>this.renderMenuElement({label:"Don’t get updates on this",onClick:()=>(this.trackEvent(L(this.getTrackClickOptionProperties(U.HideUpdates))),this.postId?this.changeUpdatesOnThisPost(!1):this.changeUpdatesOnThisComment(!1)),dataTestId:"block-updates-from-post-or-comment"}),this.renderDisableUpdatesFromSubreddit=()=>this.renderMenuElement({label:"Disable updates from this community",onClick:()=>(this.trackEvent(L(this.getTrackClickOptionProperties(U.HideSubreddit))),this.changeUpdatesFromSubreddit(!1)),dataTestId:"block-updates-from-subreddit"}),this.renderBlockThisUser=()=>this.renderMenuElement({label:"Block this user ",onClick:()=>(this.trackEvent(L(this.getTrackClickOptionProperties(U.BlockUser))),this.changeUserBlockStatus(y.Blocked)),dataTestId:"block-user"}),this.renderSeeLessFromSubreddit=()=>this.renderMenuElement({label:"See less from this community",onClick:()=>(this.trackEvent(L(this.getTrackClickOptionProperties(U.DisableNotificationType))),this.changeSeeLessFromSubreddit(!1)),dataTestId:"see-less"}),this.renderMenuElement=({label:e,onClick:t,dataTestId:i})=>r`\n ${S({onClick:t,label:e,attributes:{role:"menuitem","data-testid":i}})}\n `,this.onOpenMenu=()=>{return this.trackEvent((e=this.getTrackEventProperties(),R({...e,noun:"inbox_notification_overflow"})));var e},this.getTrackClickOptionProperties=e=>({...this.getTrackEventProperties(),action_info_type:e}),this.getTrackEventProperties=()=>({notificationId:this.notificationId,notificationType:this.messageType,isViewed:this.isViewed,isClicked:this.getIsRead()})}firstUpdated(){this.initialNotificationLevel=this.notificationLevel,this.subscribe(s.NotificationInboxNotificationViewedEvent,(e=>{e===this.notificationId&&(this.isViewed=!0)}))}render(){const e=[this.shouldRenderHide()?this.renderHideThisNotification():null,this.shouldRenderDisableUpdates()?this.renderDisableUpdates():null,this.shouldRenderBlockThisUser()?this.renderBlockThisUser():null,this.shouldRenderDisableUpdatesFromSubreddit()?this.renderDisableUpdatesFromSubreddit():null,this.shouldRenderSeeLessFromSubreddit()?this.renderSeeLessFromSubreddit():null].filter(Boolean);return 0===e.length?d:r`\n <faceplate-dropdown-menu position="bottom-end">\n ${k({appearance:"plain",attributes:{"aria-label":"Open notification actions"},leadingIcon:C({size:w.Small}),size:I.Small})}\n <faceplate-tracker \n slot="menu" \n source="${"inbox"}" \n action="view" \n noun="${"inbox_notification_overflow"}" \n data-faceplate-tracking-context="${JSON.stringify(this.getTrackEventProperties())}" \n>\n <faceplate-menu slot="menu"> ${e} </faceplate-menu>\n </faceplate-tracker>\n </faceplate-dropdown-menu>\n `}};B.styles=[c],l([h({type:Boolean,attribute:"is-viewed",reflect:!0})],B.prototype,"isViewed",void 0),l([h({type:String,attribute:"message-type"})],B.prototype,"messageType",void 0),l([h({type:String,attribute:"notification-level",reflect:!0})],B.prototype,"notificationLevel",void 0),l([h({type:String,attribute:"notification-id"})],B.prototype,"notificationId",void 0),l([h({type:String,attribute:"user-id"})],B.prototype,"userId",void 0),l([h({type:String,attribute:"user-name"})],B.prototype,"userName",void 0),l([h({type:String,attribute:"post-id"})],B.prototype,"postId",void 0),l([h({type:String,attribute:"comment-id"})],B.prototype,"commentId",void 0),l([h({type:String,attribute:"subreddit-id"})],B.prototype,"subredditId",void 0),l([h({type:Boolean,attribute:"is-hide-eligible"})],B.prototype,"isHideEligible",void 0),l([h({type:Boolean,attribute:"is-toggle-update-from-subreddit-eligible"})],B.prototype,"isToggleUpdateFromSubredditEligible",void 0),l([h({type:Boolean,attribute:"is-toggle-notification-update-eligible"})],B.prototype,"isToggleNotificationUpdateEligible",void 0),l([h({type:Boolean,attribute:"is-toggle-low-update-from-subreddit-eligible"})],B.prototype,"isToggleLowUpdateFromSubredditEligible",void 0),B=l([f("notification-context-menu")],B);let F=class extends(i(t(p))){constructor(){super(...arguments),this.fireReadAll=async()=>{try{this.trackEvent((({badgeCount:t})=>e({source:"inbox",action:"click",noun:"mark_all_as_read"},{action_info_type:t}))({badgeCount:this.getUnreadCount()})),this.publish(s.NotificationInboxNotificationReadAllEvent);(await m({operation:o.MarkNotificationReadWithThingId,variables:{input:{}}})).data.markPrivateMessageAsRead?.ok||this.dispatchErrorMessage()}catch(e){this.dispatchErrorMessage()}},this.getUnreadCount=()=>document.querySelector('[data-id="notification-count-element"]')?.getCount(),this.dispatchErrorMessage=()=>{this.dispatchEvent(n("faceplate-alert",{level:a.error,message:"Something went wrong while marking all notifications as read"}))}}firstUpdated(){this.querySelector("*")?.addEventListener("click",this.fireReadAll)}render(){return r` <slot></slot> `}};F.styles=[c],F=l([f("mark-all-notifications-read")],F);
//# sourceMappingURL=notifications-inbox-client-js-8c6be1a7.js.map
